{
    "1. Language Settings": {
        "PRIMARY_LANGUAGE": "French",
        "TECHNICAL_LANGUAGE": "English",
        "CODE_LANGUAGE": "English"
    },

    "2. Project Structure": {
        "structure": {
            "src/": {
                "api/": {
                    "routes/": "FastAPI route handlers",
                    "models/": "Pydantic models",
                    "llm/": {
                        "providers/": "LLM provider implementations",
                        "fallback/": "Fallback mechanisms",
                        "interface/": "Base interfaces"
                    }
                },
                "core/": "Core configurations and exceptions",
                "services/": "Business logic and LangGraph services"
            },
            "tests/": "Test suites",
            "docs/": {
                "technical/": "Technical docs (English)",
                "user/": "User docs (French)"
            }
        }
    },

    "3. Dependencies Management": {
        "package_manager": "pixi",
        "commands": {
            "add_dependency": "pixi add {package}",
            "install": "pixi install",
            "update": "pixi update"
        },
        "dependency_groups": {
            "llm": {
                "mistralai": ">=0.4.2,<0.5",
                "google-generativeai": ">=0.8.3,<0.9",
                "langchain-community": ">=0.3.14",
                "pydantic-settings": ">=2.7.1"
            },
            "testing": {
                "pytest": "latest",
                "pytest-asyncio": "latest",
                "pytest-cov": "latest"
            },
            "dev": {
                "black": "latest",
                "ruff": "latest",
                "mypy": "latest"
            }
        },
        "installation_rules": {
            "install_all": [
                "pixi add mistralai",
                "pixi add google-generativeai",
                "pixi add langchain-community",
                "pixi add pydantic-settings"
            ],
            "install_llm": [
                "pixi add mistralai",
                "pixi add google-generativeai"
            ],
            "install_test": [
                "pixi add pytest",
                "pixi add pytest-asyncio",
                "pixi add pytest-cov"
            ]
        }
    },

    "4. Code Generation Rules": {
        "python": {
            "formatter": "black",
            "linter": "ruff",
            "max_line_length": 88,
            "imports_ordering": true,
            "type_checking": "strict",
            "docstring_style": "google"
        }
    },

    "5. LLM Assistant Behavior": {
        "role": "Expert Python/FastAPI Developer",
        "expertise": ["FastAPI", "LangGraph", "Python", "Testing", "SOLID"],
        "code_style": "Clean Architecture",
        "response_format": "markdown",
        "proactivity_level": "high"
    },

    "6. Code Execution Rules": {
        "verify_directory": true,
        "safety_checks": true,
        "environment": "magic",
        "show_output": true,
        "error_handling": "verbose"
    },

    "7. Documentation Generation": {
        "api": "English",
        "internal": "English",
        "user_facing": "French",
        "auto_update": true,
        "api_docs": "FastAPI SwaggerUI"
    },

    "8. Project Standards": {
        "architecture": "SOLID",
        "testing": {
            "coverage_min": 80,
            "frameworks": ["pytest", "httpx"],
            "types": ["unit", "integration", "e2e"]
        },
        "git": {
            "branch_prefix": {
                "feature": "feature/",
                "bugfix": "bugfix/",
                "hotfix": "hotfix/"
            },
            "commit_convention": "conventional-commits"
        }
    },

    "9. Environment": {
        "os": "macOS M1 Ultra",
        "package_manager": "magic",
        "python_version": "3.12",
        "config_file": "pixi.toml"
    },

    "10. Security Rules": {
        "env_vars": ".env",
        "secrets_management": "strict",
        "api_keys": "environment_variables_only",
        "cors": "configured",
        "auth": "fastapi-security"
    },

    "11. API Standards": {
        "validation": "pydantic",
        "error_handling": "custom exceptions",
        "rate_limiting": true,
        "logging": "structured",
        "accessibility": "openapi"
    },

    "12. Development Workflow": {
        "commands": {
            "test": "pytest -v",
            "test_coverage": "pytest --cov=src tests/",
            "lint": "ruff check src tests",
            "format": "black src tests",
            "type_check": "mypy src"
        },
        "pre_commit": [
            "format",
            "lint",
            "type_check",
            "test"
        ]
    },

    "guidelines": [
        {
            "name": "bug-focus",
            "description": "Focus sur la résolution des bugs spécifiques plutôt que sur la restructuration complète du projet",
            "rules": [
                "Prioriser la résolution du problème spécifique mentionné",
                "Ne pas suggérer de restructuration sauf si explicitement demandé",
                "Garder les solutions minimales et focalisées",
                "Commencer par la solution la moins invasive",
                "Demander des clarifications si la description du bug n'est pas claire"
            ]
        }
    ]
}
